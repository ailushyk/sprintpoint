datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  email     String?  @unique
  username  String?
  avatar    String?
  type      String
  theme     String?
  rooms     Room[]
  votes     Vote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Deck {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique @default(uuid())
  rooms     Room[]
  cards     Card[]
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Card {
  id        String   @id @default(uuid())
  name      String
  value     Float?
  deck      Deck     @relation(fields: [deckId], references: [id])
  deckId    String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  username  String
  cardName  String
  cardValue Float
  round     Round?   @relation(fields: [roundId], references: [id])
  roundId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Round {
  id        String   @id @default(uuid())
  order     Int
  session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?
  votes     Vote[]
  status    String @default("idle")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  room      Room?    @relation(fields: [roomId], references: [id])
  roomId    String?
  deck      Deck?    @relation(fields: [deckId], references: [id])
  deckId    String?
  rounds    Round[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id        String    @id @default(uuid())
  name      String
  code      String    @unique
  users     User[]
  deck      Deck?     @relation(fields: [deckId], references: [id])
  deckId    String?
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
